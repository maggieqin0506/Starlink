{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maggie/Documents/Projects/Starlink/starlink/src/components/Main.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap';\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from \"../constants\";\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.showNearbySatellite = setting => {\n      this.setState({\n        settings: setting\n      });\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      // fetch data from N2Y0\n      // step 1: get setting values\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude\n      } = setting; // step 2: prepare url\n      // base url + /api/ + ...\n      // 不能直接用domain因为会出现跨域访问的问题\n      // 我们要用/api/ 作为代理 它会指向domain\n\n      const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/\n        ${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        isLoadingList: true\n      }); // step 3: ajax call by using axios\n      //\n      // axois.get(url).then( get the response)\n      // promise 用法\n      // get() - return promise\n      // .then() - get data\n      // .catch() - receive errors\n\n      axios.get(url).then(response => {\n        console.log(response.data);\n        this.setState({\n          satInfo: response.data,\n          isLoadingList: false\n        });\n      }).catch(error => {\n        console.log('error in fetch satellite -> ', error);\n      });\n    };\n\n    this.state = {\n      satInfo: null,\n      // settings: null,\n      // waiting for the data icon; false - not spinning\n      isLoadingList: false\n    };\n  } // transfer the data (setting)\n  // set once, rerender once\n\n\n  render() {\n    const {\n      satInfo\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-side\",\n        children: [/*#__PURE__*/_jsxDEV(SatSetting, {\n          onShow: this.showNearbySatellite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SatelliteList, {\n          satInfo: satInfo,\n          isLoad: this.state.isLoadingList,\n          onShowMap: this.showMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-side\",\n        children: \"right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/maggie/Documents/Projects/Starlink/starlink/src/components/Main.js"],"names":["React","Component","axios","SatSetting","SatelliteList","WorldMap","NEARBY_SATELLITE","SAT_API_KEY","STARLINK_CATEGORY","Main","constructor","showNearbySatellite","setting","setState","settings","fetchSatellite","latitude","longitude","elevation","altitude","url","isLoadingList","get","then","response","console","log","data","satInfo","catch","error","state","render","showMap"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,gBAAR,EAA0BC,WAA1B,EAAuCC,iBAAvC,QAA+D,cAA/D;;AAEA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AACzBS,EAAAA,WAAW,GAAG;AACV;;AADU,SAYdC,mBAZc,GAYSC,OAAD,IAAa;AAC/B,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEF;AADA,OAAd;AAGA,WAAKG,cAAL,CAAoBH,OAApB;AACH,KAjBa;;AAAA,SAoBdG,cApBc,GAoBIH,OAAD,IAAa;AAC1B;AACA;AACA,YAAM;AAACI,QAAAA,QAAD;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA,SAAtB;AAAiCC,QAAAA;AAAjC,UAA6CP,OAAnD,CAH0B,CAK1B;AACA;AACA;AACA;;AACA,YAAMQ,GAAG,GAAI,QAAOd,gBAAiB,IAAGU,QAAS,IAAGC,SAAU,IAAGC,SAAU,IAAGC,QAAS;AAC/F,UAAUX,iBAAkB,YAAWD,WAAY,EAD3C;AAGA,WAAKM,QAAL,CAAc;AACVQ,QAAAA,aAAa,EAAE;AADL,OAAd,EAZ0B,CAgB1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnB,MAAAA,KAAK,CAACoB,GAAN,CAAUF,GAAV,EACKG,IADL,CACUC,QAAQ,IAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACA,aAAKd,QAAL,CAAc;AACVe,UAAAA,OAAO,EAAEJ,QAAQ,CAACG,IADR;AAEVN,UAAAA,aAAa,EAAE;AAFL,SAAd;AAIH,OAPL,EAQKQ,KARL,CAQWC,KAAK,IAAI;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CI,KAA5C;AACH,OAVL;AAWH,KAtDa;;AAEV,SAAKC,KAAL,GAAa;AACTH,MAAAA,OAAO,EAAE,IADA;AAET;AACA;AACAP,MAAAA,aAAa,EAAE;AAJN,KAAb;AAMH,GATwB,CAWzB;AACA;;;AA8CAW,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA;AAAD,QAAY,KAAKG,KAAvB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,MAAM,EAAE,KAAKpB;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AAAe,UAAA,OAAO,EAAEiB,OAAxB;AACe,UAAA,MAAM,EAAE,KAAKG,KAAL,CAAWV,aADlC;AAEe,UAAA,SAAS,EAAE,KAAKY;AAF/B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAzEwB;;AA4E7B,eAAexB,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport WorldMap from './WorldMap'\nimport {NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY} from \"../constants\";\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            satInfo: null,\n            // settings: null,\n            // waiting for the data icon; false - not spinning\n            isLoadingList: false\n        };\n    }\n\n    // transfer the data (setting)\n    // set once, rerender once\n    showNearbySatellite = (setting) => {\n        this.setState({\n            settings: setting\n        })\n        this.fetchSatellite(setting);\n    }\n\n    // fetch data\n    fetchSatellite = (setting) => {\n        // fetch data from N2Y0\n        // step 1: get setting values\n        const {latitude, longitude, elevation, altitude} = setting;\n\n        // step 2: prepare url\n        // base url + /api/ + ...\n        // 不能直接用domain因为会出现跨域访问的问题\n        // 我们要用/api/ 作为代理 它会指向domain\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/\n        ${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n        this.setState({\n            isLoadingList: true\n        });\n\n        // step 3: ajax call by using axios\n        //\n        // axois.get(url).then( get the response)\n        // promise 用法\n        // get() - return promise\n        // .then() - get data\n        // .catch() - receive errors\n        axios.get(url)\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    satInfo: response.data,\n                    isLoadingList: false\n                })\n            })\n            .catch(error => {\n                console.log('error in fetch satellite -> ', error);\n            })\n    }\n\n\n    render() {\n        const {satInfo} = this.state;\n        return (\n            <div className='main'>\n                <div className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite}/>\n                    <SatelliteList satInfo={satInfo}\n                                   isLoad={this.state.isLoadingList}\n                                   onShowMap={this.showMap} />\n                </div>\n                <div className=\"right-side\">\n                    right\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}