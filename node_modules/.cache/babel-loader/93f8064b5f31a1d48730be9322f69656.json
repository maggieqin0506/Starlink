{"ast":null,"code":"// import React, {Component} from \"react\";\n// import axios from \"axios\";\n// import {Spin} from \"antd\";\n// import {feature} from \"topojson-client\";\n// import {geoKavrayskiy7} from \"d3-geo-projection\";\n// import {geoGraticule, geoPath} from \"d3-geo\";\n// import {select as d3Select} from \"d3-selection\";\n// import {schemeCategory10} from \"d3-scale-chromatic\";\n// import * as d3Scale from \"d3-scale\";\n// import {timeFormat as d3TimeFormat} from \"d3-time-format\";\n//\n// import {\n//     WORLD_MAP_URL,\n//     SATELLITE_POSITION_URL,\n//     SAT_API_KEY\n// } from \"../constants\";\n//\n// const width = 960;\n// const height = 600;\n//\n// class WorldMap extends Component {\n//     constructor() {\n//         super();\n//         this.state = {\n//             map: null\n//         }\n//         // create a ref so that you could get the map\n//         this.refMap = React.createRef();\n//         this.map = null;\n//         // d3Scale map between index(numbers) and colors\n//         this.color = d3Scale.scaleOrdinal(schemeCategory10);\n//         this.refTrack = React.createRef();\n//     }\n//\n//     // get data from the backend\n//     componentDidMount() {\n//         //.then()  - succeed\n//         // .catch() - failure\n//         axios.get(WORLD_MAP_URL)\n//             .then(res => {\n//                 const {data} = res;\n//                 const land = feature(data, data.objects.countries).features;\n//                 this.generateMap(land);\n//             })\n//             .catch(e => console.log('err in fecth world map data ', e))\n//     }\n//\n//     componentDidUpdate(prevProps, prevState, snapshot) {\n//         if (prevProps.satData !== this.props.satData) {\n//             // get the satellite data\n//             const {\n//                 latitude,\n//                 longitude,\n//                 elevation,\n//                 altitude,\n//                 duration\n//             } = this.props.observerData;\n//\n//             // speed up by 60 times\n//             const endTime = duration * 60;\n//\n//             this.setState({\n//                 isLoading: true\n//             });\n//\n//             // step 1: prepare url\n//             // data: satellite data\n//             const urls = this.props.satData.map(sat => {\n//                 const {satid} = sat;\n//                 const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/\n//                 ${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n//\n//                 // send ajax call\n//                 return axios.get(url);\n//             });\n//\n//             // step 2: parse satellite positions\n//             // axios.all() - get result\n//             axios\n//                 .all(urls)\n//                 .then(\n//                     // spread() - follow an call back, get the result of response\n//                     // collect data ... args\n//                     // return an array - filter\n//                     // equivalent to promise.all\n//                     axios.spread((...args) => {\n//                         return args.map(item => item.data); // only keep item.data; filter\n//                     })\n//                 )\n//                 .then(res => {\n//                     this.setState({\n//                         isLoading: false,\n//                         isDrawing: true\n//                     });\n//\n//                     if (!prevState.isDrawing) {\n//                         this.track(res);\n//                     } else {\n//                         const oHint = document.getElementsByClassName(\"hint\")[0];\n//                         oHint.innerHTML =\n//                             \"Please wait for these satellite animation to finish before selection new ones!\";\n//                     }\n//                 })\n//                 .catch(e => {\n//                     console.log(\"err in fetch satellite position -> \", e.message);\n//                 });\n//         }\n//     }\n//\n//     track = data => {\n//         if (!data[0].hasOwnProperty(\"positions\")) {\n//             throw new Error(\"no position data\");\n//             return;\n//         }\n//\n//         const len = data[0].positions.length;\n//         const {duration} = this.props.observerData;\n//         const {context2} = this.map;\n//\n//         let now = new Date();\n//\n//         let i = 0;\n//\n//         // 每隔多久画一次\n//         let timer = setInterval(() => {\n//             // 画图的逻辑结构\n//             let ct = new Date();\n//\n//             // check if is the initial state\n//             // if not, check how many time has passed\n//             let timePassed = i === 0 ? 0 : ct - now;\n//\n//             // 加速60倍的数据\n//             let time = new Date(now.getTime() + 60 * timePassed);\n//\n//             context2.clearRect(0, 0, width, height);\n//\n//             context2.font = \"bold 14px sans-serif\";\n//             context2.fillStyle = \"#333\";\n//             context2.textAlign = \"center\";\n//             // show the time\n//             context2.fillText(d3TimeFormat(time), width / 2, 10);\n//\n//             if (i >= len) {\n//                 // if don't clear then 越界了，arent able to get data\n//                 clearInterval(timer);\n//                 this.setState({isDrawing: false});\n//                 const oHint = document.getElementsByClassName(\"hint\")[0];\n//                 oHint.innerHTML = \"\";\n//                 return;\n//             }\n//\n//             // draw\n//             data.forEach(sat => {\n//                 const {info, positions} = sat;\n//                 this.drawSat(info, positions[i]);\n//             });\n//\n//             // process the changing i\n//             i += 60;\n//         }, 1000);\n//     };\n//\n//     drawSat = (sat, pos) => {\n//         const {satlongitude, satlatitude} = pos;\n//\n//         if (!satlongitude || !satlatitude) return;\n//\n//         const {satname} = sat;\n//         // regular expression: 找一个或多个数字，extract all numbers and then join\n//         const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n//\n//         const {projection, context2} = this.map;\n//         const xy = projection([satlongitude, satlatitude]);\n//\n//         context2.fillStyle = this.color(nameWithNumber);\n//         context2.beginPath();\n//         // draw a circle\n//         context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n//         context2.fill();\n//\n//         context2.font = \"bold 11px sans-serif\";\n//         context2.textAlign = \"center\";\n//         // name of the satellite and position,\n//         // name of the satellite and position,\n//         context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n//     };\n//\n//     generateMap(land) {\n//         // create an projection map and set the parameters\n//         const projection = geoKavrayskiy7()\n//             .scale(170)\n//             .translate([width / 2, height / 2])\n//             .precision(.1);\n//\n//         // this library provides latitude and longitude data\n//         const graticule = geoGraticule();\n//\n//         // get the 画图位置\n//         const canvas = d3Select(this.refMap.current)\n//             .attr(\"width\", width)\n//             .attr(\"height\", height);\n//\n//         const canvas2 = d3Select(this.refTrack.current)\n//             .attr(\"width\", width)\n//             .attr(\"height\", height);\n//\n//         // 画布\n//         const context = canvas.node().getContext(\"2d\");\n//         const context2 = canvas2.node().getContext(\"2d\");\n//\n//\n//         // 真实数据和path进行投影\n//         let path = geoPath()\n//             .projection(projection)\n//             .context(context);\n//\n//         // ele - each data\n//         land.forEach(ele => {\n//             // draw one path\n//             context.fillStyle = '#B3DDEF';\n//             context.strokeStyle = '#000';\n//             context.globalAlpha = 0.7;\n//             context.beginPath();\n//             path(ele);\n//             context.fill();\n//             context.stroke();\n//\n//             // draw the longitude and altitude\n//             context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n//             context.beginPath();\n//             path(graticule());\n//             context.lineWidth = 0.1;\n//             context.stroke();\n//\n//             context.beginPath();\n//             context.lineWidth = 0.5;\n//             path(graticule.outline());\n//             context.stroke();\n//         })\n//         // give canvas to the map\n//         // change it to the class attributes\n//         this.map = {\n//             projection: projection,\n//             graticule: graticule,\n//             context: context,\n//             context2: context2\n//         };\n//     }\n//\n//     render() {\n//         const {isLoading} = this.state;\n//         return (\n//             <div className=\"map-box\">\n//                 {isLoading ? (\n//                     <div className=\"spinner\">\n//                         <Spin tip=\"Loading...\" size=\"large\"/>\n//                     </div>\n//                 ) : null}\n//                 <canvas className=\"map\" ref={this.refMap}/>\n//                 <canvas className=\"track\" ref={this.refTrack}/>\n//                 <div className=\"hint\"/>\n//             </div>\n//         );\n//     }\n// }\n//\n// export default WorldMap;","map":{"version":3,"sources":["/Users/maggie/Documents/Projects/Starlink/src/components/WorldMap.js"],"names":[],"mappingssourcesContent":["// import React, {Component} from \"react\";\n// import axios from \"axios\";\n// import {Spin} from \"antd\";\n// import {feature} from \"topojson-client\";\n// import {geoKavrayskiy7} from \"d3-geo-projection\";\n// import {geoGraticule, geoPath} from \"d3-geo\";\n// import {select as d3Select} from \"d3-selection\";\n// import {schemeCategory10} from \"d3-scale-chromatic\";\n// import * as d3Scale from \"d3-scale\";\n// import {timeFormat as d3TimeFormat} from \"d3-time-format\";\n//\n// import {\n//     WORLD_MAP_URL,\n//     SATELLITE_POSITION_URL,\n//     SAT_API_KEY\n// } from \"../constants\";\n//\n// const width = 960;\n// const height = 600;\n//\n// class WorldMap extends Component {\n//     constructor() {\n//         super();\n//         this.state = {\n//             map: null\n//         }\n//         // create a ref so that you could get the map\n//         this.refMap = React.createRef();\n//         this.map = null;\n//         // d3Scale map between index(numbers) and colors\n//         this.color = d3Scale.scaleOrdinal(schemeCategory10);\n//         this.refTrack = React.createRef();\n//     }\n//\n//     // get data from the backend\n//     componentDidMount() {\n//         //.then()  - succeed\n//         // .catch() - failure\n//         axios.get(WORLD_MAP_URL)\n//             .then(res => {\n//                 const {data} = res;\n//                 const land = feature(data, data.objects.countries).features;\n//                 this.generateMap(land);\n//             })\n//             .catch(e => console.log('err in fecth world map data ', e))\n//     }\n//\n//     componentDidUpdate(prevProps, prevState, snapshot) {\n//         if (prevProps.satData !== this.props.satData) {\n//             // get the satellite data\n//             const {\n//                 latitude,\n//                 longitude,\n//                 elevation,\n//                 altitude,\n//                 duration\n//             } = this.props.observerData;\n//\n//             // speed up by 60 times\n//             const endTime = duration * 60;\n//\n//             this.setState({\n//                 isLoading: true\n//             });\n//\n//             // step 1: prepare url\n//             // data: satellite data\n//             const urls = this.props.satData.map(sat => {\n//                 const {satid} = sat;\n//                 const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/\n//                 ${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n//\n//                 // send ajax call\n//                 return axios.get(url);\n//             });\n//\n//             // step 2: parse satellite positions\n//             // axios.all() - get result\n//             axios\n//                 .all(urls)\n//                 .then(\n//                     // spread() - follow an call back, get the result of response\n//                     // collect data ... args\n//                     // return an array - filter\n//                     // equivalent to promise.all\n//                     axios.spread((...args) => {\n//                         return args.map(item => item.data); // only keep item.data; filter\n//                     })\n//                 )\n//                 .then(res => {\n//                     this.setState({\n//                         isLoading: false,\n//                         isDrawing: true\n//                     });\n//\n//                     if (!prevState.isDrawing) {\n//                         this.track(res);\n//                     } else {\n//                         const oHint = document.getElementsByClassName(\"hint\")[0];\n//                         oHint.innerHTML =\n//                             \"Please wait for these satellite animation to finish before selection new ones!\";\n//                     }\n//                 })\n//                 .catch(e => {\n//                     console.log(\"err in fetch satellite position -> \", e.message);\n//                 });\n//         }\n//     }\n//\n//     track = data => {\n//         if (!data[0].hasOwnProperty(\"positions\")) {\n//             throw new Error(\"no position data\");\n//             return;\n//         }\n//\n//         const len = data[0].positions.length;\n//         const {duration} = this.props.observerData;\n//         const {context2} = this.map;\n//\n//         let now = new Date();\n//\n//         let i = 0;\n//\n//         // 每隔多久画一次\n//         let timer = setInterval(() => {\n//             // 画图的逻辑结构\n//             let ct = new Date();\n//\n//             // check if is the initial state\n//             // if not, check how many time has passed\n//             let timePassed = i === 0 ? 0 : ct - now;\n//\n//             // 加速60倍的数据\n//             let time = new Date(now.getTime() + 60 * timePassed);\n//\n//             context2.clearRect(0, 0, width, height);\n//\n//             context2.font = \"bold 14px sans-serif\";\n//             context2.fillStyle = \"#333\";\n//             context2.textAlign = \"center\";\n//             // show the time\n//             context2.fillText(d3TimeFormat(time), width / 2, 10);\n//\n//             if (i >= len) {\n//                 // if don't clear then 越界了，arent able to get data\n//                 clearInterval(timer);\n//                 this.setState({isDrawing: false});\n//                 const oHint = document.getElementsByClassName(\"hint\")[0];\n//                 oHint.innerHTML = \"\";\n//                 return;\n//             }\n//\n//             // draw\n//             data.forEach(sat => {\n//                 const {info, positions} = sat;\n//                 this.drawSat(info, positions[i]);\n//             });\n//\n//             // process the changing i\n//             i += 60;\n//         }, 1000);\n//     };\n//\n//     drawSat = (sat, pos) => {\n//         const {satlongitude, satlatitude} = pos;\n//\n//         if (!satlongitude || !satlatitude) return;\n//\n//         const {satname} = sat;\n//         // regular expression: 找一个或多个数字，extract all numbers and then join\n//         const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n//\n//         const {projection, context2} = this.map;\n//         const xy = projection([satlongitude, satlatitude]);\n//\n//         context2.fillStyle = this.color(nameWithNumber);\n//         context2.beginPath();\n//         // draw a circle\n//         context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n//         context2.fill();\n//\n//         context2.font = \"bold 11px sans-serif\";\n//         context2.textAlign = \"center\";\n//         // name of the satellite and position,\n//         // name of the satellite and position,\n//         context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n//     };\n//\n//     generateMap(land) {\n//         // create an projection map and set the parameters\n//         const projection = geoKavrayskiy7()\n//             .scale(170)\n//             .translate([width / 2, height / 2])\n//             .precision(.1);\n//\n//         // this library provides latitude and longitude data\n//         const graticule = geoGraticule();\n//\n//         // get the 画图位置\n//         const canvas = d3Select(this.refMap.current)\n//             .attr(\"width\", width)\n//             .attr(\"height\", height);\n//\n//         const canvas2 = d3Select(this.refTrack.current)\n//             .attr(\"width\", width)\n//             .attr(\"height\", height);\n//\n//         // 画布\n//         const context = canvas.node().getContext(\"2d\");\n//         const context2 = canvas2.node().getContext(\"2d\");\n//\n//\n//         // 真实数据和path进行投影\n//         let path = geoPath()\n//             .projection(projection)\n//             .context(context);\n//\n//         // ele - each data\n//         land.forEach(ele => {\n//             // draw one path\n//             context.fillStyle = '#B3DDEF';\n//             context.strokeStyle = '#000';\n//             context.globalAlpha = 0.7;\n//             context.beginPath();\n//             path(ele);\n//             context.fill();\n//             context.stroke();\n//\n//             // draw the longitude and altitude\n//             context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n//             context.beginPath();\n//             path(graticule());\n//             context.lineWidth = 0.1;\n//             context.stroke();\n//\n//             context.beginPath();\n//             context.lineWidth = 0.5;\n//             path(graticule.outline());\n//             context.stroke();\n//         })\n//         // give canvas to the map\n//         // change it to the class attributes\n//         this.map = {\n//             projection: projection,\n//             graticule: graticule,\n//             context: context,\n//             context2: context2\n//         };\n//     }\n//\n//     render() {\n//         const {isLoading} = this.state;\n//         return (\n//             <div className=\"map-box\">\n//                 {isLoading ? (\n//                     <div className=\"spinner\">\n//                         <Spin tip=\"Loading...\" size=\"large\"/>\n//                     </div>\n//                 ) : null}\n//                 <canvas className=\"map\" ref={this.refMap}/>\n//                 <canvas className=\"track\" ref={this.refTrack}/>\n//                 <div className=\"hint\"/>\n//             </div>\n//         );\n//     }\n// }\n//\n// export default WorldMap;\n\n\n"]},"metadata":{},"sourceType":"module"}