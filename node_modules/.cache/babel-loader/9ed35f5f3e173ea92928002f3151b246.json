{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maggie/Documents/Projects/Starlink/starlink/src/components/WorldMap.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      if (!data[0].hasOwnProperty(\"positions\")) {\n        throw new Error(\"no position data\");\n        return;\n      }\n\n      const len = data[0].positions.length;\n      const {\n        duration\n      } = this.props.observerData;\n      const {\n        context2\n      } = this.map;\n      let now = new Date();\n      let i = 0; // 每隔多久画一次\n\n      let timer = setInterval(() => {\n        // 画图的逻辑结构\n        let ct = new Date(); // check if is the initial state\n        // if not, check how many time has passed\n\n        let timePassed = i === 0 ? 0 : ct - now; // 加速60倍的数据\n\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\"; // show the time\n\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"\";\n          return;\n        } // draw\n\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        }); // process the changing i\n\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.state = {\n      map: null\n    }; // create a ref so that you could get the map\n\n    this.refMap = /*#__PURE__*/React.createRef();\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refTrack = /*#__PURE__*/React.createRef();\n  } // get data from the backend\n\n\n  componentDidMount() {\n    //.then()  - succeed\n    // .catch() - failure\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      // get the satellite data\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData; // speed up by 60 times\n\n      const endTime = duration * 60;\n      this.setState({\n        isLoading: true\n      }); // step 1: prepare url\n      // data: satellite data\n\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/\n                ${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`; // send ajax call\n\n        return axios.get(url);\n      }); // step 2: parse satellite positions\n      // axios.all() - get result\n\n      axios.all(urls).then( // spread() - follow an call back, get the result of response\n      // collect data ... args\n      // return an array - filter\n      // equivalent to promise.all\n      axios.spread((...args) => {\n        return args.map(item => item.data); // only keep item.data; filter\n      })).then(res => {\n        this.setState({\n          isLoading: false,\n          isDrawing: true\n        });\n\n        if (!prevState.isDrawing) {\n          this.track(res);\n        } else {\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n        }\n      }).catch(e => {\n        console.log(\"err in fetch satellite position -> \", e.message);\n      });\n    }\n  }\n\n  generateMap(land) {\n    // create an projection map and set the parameters\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1); // this library provides latitude and longitude data\n\n    const graticule = geoGraticule(); // get the 画图位置\n\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n    const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height); // 画布\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\"); // 真实数据和path进行投影\n\n    let path = geoPath().projection(projection).context(context); // ele - each data\n\n    land.forEach(ele => {\n      // draw one path\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke(); // draw the longitude and altitude\n\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    }); // give canvas to the map\n    // change it to the class attributes\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading...\",\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/maggie/Documents/Projects/Starlink/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","Spin","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","hasOwnProperty","Error","len","positions","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","state","refMap","createRef","scaleOrdinal","refTrack","componentDidMount","get","then","res","land","objects","countries","features","generateMap","catch","e","console","log","componentDidUpdate","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","altitude","endTime","isLoading","urls","satid","url","all","spread","args","item","message","scale","translate","precision","graticule","canvas","current","attr","canvas2","context","node","getContext","path","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport {Spin} from \"antd\";\nimport {feature} from \"topojson-client\";\nimport {geoKavrayskiy7} from \"d3-geo-projection\";\nimport {geoGraticule, geoPath} from \"d3-geo\";\nimport {select as d3Select} from \"d3-selection\";\nimport {schemeCategory10} from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport {timeFormat as d3TimeFormat} from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            map: null\n        }\n        // create a ref so that you could get the map\n        this.refMap = React.createRef();\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refTrack = React.createRef();\n    }\n\n    // get data from the backend\n    componentDidMount() {\n        //.then()  - succeed\n        // .catch() - failure\n        axios.get(WORLD_MAP_URL)\n            .then(res => {\n                const {data} = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fecth world map data ', e))\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            // get the satellite data\n            const {\n                latitude,\n                longitude,\n                elevation,\n                altitude,\n                duration\n            } = this.props.observerData;\n\n            // speed up by 60 times\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            // step 1: prepare url\n            // data: satellite data\n            const urls = this.props.satData.map(sat => {\n                const {satid} = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/\n                ${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                // send ajax call\n                return axios.get(url);\n            });\n\n            // step 2: parse satellite positions\n            // axios.all() - get result\n            axios\n                .all(urls)\n                .then(\n                    // spread() - follow an call back, get the result of response\n                    // collect data ... args\n                    // return an array - filter\n                    // equivalent to promise.all\n                    axios.spread((...args) => {\n                        return args.map(item => item.data); // only keep item.data; filter\n                    })\n                )\n                .then(res => {\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(res);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            return;\n        }\n\n        const len = data[0].positions.length;\n        const {duration} = this.props.observerData;\n        const {context2} = this.map;\n\n        let now = new Date();\n\n        let i = 0;\n\n        // 每隔多久画一次\n        let timer = setInterval(() => {\n            // 画图的逻辑结构\n            let ct = new Date();\n\n            // check if is the initial state\n            // if not, check how many time has passed\n            let timePassed = i === 0 ? 0 : ct - now;\n\n            // 加速60倍的数据\n            let time = new Date(now.getTime() + 60 * timePassed);\n\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            // show the time\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                clearInterval(timer);\n                this.setState({isDrawing: false});\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n            }\n\n            // draw\n            data.forEach(sat => {\n                const {info, positions} = sat;\n                this.drawSat(info, positions[i]);\n            });\n\n            // process the changing i\n            i += 60;\n        }, 1000);\n    };\n\n    drawSat = (sat, pos) => {\n        const {satlongitude, satlatitude} = pos;\n\n        if (!satlongitude || !satlatitude) return;\n\n        const {satname} = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const {projection, context2} = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    generateMap(land) {\n        // create an projection map and set the parameters\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        // this library provides latitude and longitude data\n        const graticule = geoGraticule();\n\n        // get the 画图位置\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        // 画布\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n\n        // 真实数据和path进行投影\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        // ele - each data\n        land.forEach(ele => {\n            // draw one path\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            // draw the longitude and altitude\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n        // give canvas to the map\n        // change it to the class attributes\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n    }\n\n    render() {\n        const {isLoading} = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\"/>\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap}/>\n                <canvas className=\"track\" ref={this.refTrack}/>\n                <div className=\"hint\"/>\n            </div>\n        );\n    }\n}\n\nexport default WorldMap;\n"]},"metadata":{},"sourceType":"module"}